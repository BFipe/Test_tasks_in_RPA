// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Second_Task_Data;

#nullable disable

namespace SecondTaskData.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230120183706_file name 100")]
    partial class filename100
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Second_Task_Entities.ExcelEntities.ExcelAccount", b =>
                {
                    b.Property<string>("ExcelAccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccountingValue")
                        .HasColumnType("int");

                    b.Property<double>("ActiveAccountOpeningBalance")
                        .HasPrecision(24, 3)
                        .HasColumnType("float(24)");

                    b.Property<double>("ActiveAccountOutgoingBalance")
                        .HasPrecision(24, 3)
                        .HasColumnType("float(24)");

                    b.Property<double>("ActualActiveAccountOutgoingBalance")
                        .HasPrecision(24, 3)
                        .HasColumnType("float(24)");

                    b.Property<double>("ActualPassiveAccountOutgoingBalance")
                        .HasPrecision(24, 3)
                        .HasColumnType("float(24)");

                    b.Property<double>("CreditAccountNegotiableBalance")
                        .HasPrecision(24, 3)
                        .HasColumnType("float(24)");

                    b.Property<double>("DebitAccountNegotiableBalance")
                        .HasPrecision(24, 3)
                        .HasColumnType("float(24)");

                    b.Property<string>("ExcelAccountGroupId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("PassiveAccountOpeningBalance")
                        .HasPrecision(24, 3)
                        .HasColumnType("float(24)");

                    b.Property<double>("PassiveAccountOutgoingBalance")
                        .HasPrecision(24, 3)
                        .HasColumnType("float(24)");

                    b.HasKey("ExcelAccountId");

                    b.HasIndex("ExcelAccountGroupId");

                    b.ToTable("ExcelAccounts");
                });

            modelBuilder.Entity("Second_Task_Entities.ExcelEntities.ExcelAccountGroup", b =>
                {
                    b.Property<string>("ExcelAccountGroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccountingValue")
                        .HasColumnType("int");

                    b.Property<double>("ActualTotalActiveAccountOutgoingBalance")
                        .HasPrecision(24, 3)
                        .HasColumnType("float(24)");

                    b.Property<double>("ActualTotalPassiveAccountOutgoingBalance")
                        .HasPrecision(24, 3)
                        .HasColumnType("float(24)");

                    b.Property<int>("EndingValuesRow")
                        .HasColumnType("int");

                    b.Property<string>("ExcelClassId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StartingValuesRow")
                        .HasColumnType("int");

                    b.Property<double>("TotalActiveAccountOpeningBalance")
                        .HasPrecision(24, 3)
                        .HasColumnType("float(24)");

                    b.Property<double>("TotalActiveAccountOutgoingBalance")
                        .HasPrecision(24, 3)
                        .HasColumnType("float(24)");

                    b.Property<double>("TotalCreditAccountNegotiableBalance")
                        .HasPrecision(24, 3)
                        .HasColumnType("float(24)");

                    b.Property<double>("TotalDebitAccountNegotiableBalance")
                        .HasPrecision(24, 3)
                        .HasColumnType("float(24)");

                    b.Property<double>("TotalPassiveAccountOpeningBalance")
                        .HasPrecision(24, 3)
                        .HasColumnType("float(24)");

                    b.Property<double>("TotalPassiveAccountOutgoingBalance")
                        .HasPrecision(24, 3)
                        .HasColumnType("float(24)");

                    b.HasKey("ExcelAccountGroupId");

                    b.HasIndex("ExcelClassId");

                    b.ToTable("ExcelAccountGroups");
                });

            modelBuilder.Entity("Second_Task_Entities.ExcelEntities.ExcelClass", b =>
                {
                    b.Property<string>("ExcelClassId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("ActualTotalActiveClassOutgoingBalance")
                        .HasPrecision(24, 3)
                        .HasColumnType("float(24)");

                    b.Property<double>("ActualTotalPassiveClassOutgoingBalance")
                        .HasPrecision(24, 3)
                        .HasColumnType("float(24)");

                    b.Property<int>("EndingValuesRow")
                        .HasColumnType("int");

                    b.Property<string>("ExcelFileId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartingValuesRow")
                        .HasColumnType("int");

                    b.Property<double>("TotalActiveClassOpeningBalance")
                        .HasPrecision(24, 3)
                        .HasColumnType("float(24)");

                    b.Property<double>("TotalActiveClassOutgoingBalance")
                        .HasPrecision(24, 3)
                        .HasColumnType("float(24)");

                    b.Property<double>("TotalCreditClassNegotiableBalance")
                        .HasPrecision(24, 3)
                        .HasColumnType("float(24)");

                    b.Property<double>("TotalDebitClassNegotiableBalance")
                        .HasPrecision(24, 3)
                        .HasColumnType("float(24)");

                    b.Property<double>("TotalPassiveClassOpeningBalance")
                        .HasPrecision(24, 3)
                        .HasColumnType("float(24)");

                    b.Property<double>("TotalPassiveClassOutgoingBalance")
                        .HasPrecision(24, 3)
                        .HasColumnType("float(24)");

                    b.HasKey("ExcelClassId");

                    b.HasIndex("ExcelFileId");

                    b.ToTable("ExcelClasses");
                });

            modelBuilder.Entity("Second_Task_Entities.ExcelEntities.ExcelFile", b =>
                {
                    b.Property<string>("ExcelFileId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("ActualTotalActiveOutgoingBalance")
                        .HasPrecision(24, 3)
                        .HasColumnType("float(24)");

                    b.Property<double>("ActualTotalPassiveOutgoingBalance")
                        .HasPrecision(24, 3)
                        .HasColumnType("float(24)");

                    b.Property<string>("ExcelFileBankName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ExcelFileDescription")
                        .IsRequired()
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<string>("ExcelFileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("TotalActiveOpeningBalance")
                        .HasPrecision(24, 3)
                        .HasColumnType("float(24)");

                    b.Property<double>("TotalActiveOutgoingBalance")
                        .HasPrecision(24, 3)
                        .HasColumnType("float(24)");

                    b.Property<double>("TotalCreditNegotiableBalance")
                        .HasPrecision(24, 3)
                        .HasColumnType("float(24)");

                    b.Property<double>("TotalDebitNegotiableBalance")
                        .HasPrecision(24, 3)
                        .HasColumnType("float(24)");

                    b.Property<double>("TotalPassiveOpeningBalance")
                        .HasPrecision(24, 3)
                        .HasColumnType("float(24)");

                    b.Property<double>("TotalPassiveOutgoingBalance")
                        .HasPrecision(24, 3)
                        .HasColumnType("float(24)");

                    b.HasKey("ExcelFileId");

                    b.HasIndex("ExcelFileName")
                        .IsUnique();

                    b.ToTable("ExcelFiles");
                });

            modelBuilder.Entity("Second_Task_Entities.ExcelEntities.ExcelAccount", b =>
                {
                    b.HasOne("Second_Task_Entities.ExcelEntities.ExcelAccountGroup", "ExcelAccountGroup")
                        .WithMany("ExcelAccounts")
                        .HasForeignKey("ExcelAccountGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExcelAccountGroup");
                });

            modelBuilder.Entity("Second_Task_Entities.ExcelEntities.ExcelAccountGroup", b =>
                {
                    b.HasOne("Second_Task_Entities.ExcelEntities.ExcelClass", "ExcelClass")
                        .WithMany("ExcelAccountGroups")
                        .HasForeignKey("ExcelClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExcelClass");
                });

            modelBuilder.Entity("Second_Task_Entities.ExcelEntities.ExcelClass", b =>
                {
                    b.HasOne("Second_Task_Entities.ExcelEntities.ExcelFile", "ExcelFile")
                        .WithMany("ExcelClasses")
                        .HasForeignKey("ExcelFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExcelFile");
                });

            modelBuilder.Entity("Second_Task_Entities.ExcelEntities.ExcelAccountGroup", b =>
                {
                    b.Navigation("ExcelAccounts");
                });

            modelBuilder.Entity("Second_Task_Entities.ExcelEntities.ExcelClass", b =>
                {
                    b.Navigation("ExcelAccountGroups");
                });

            modelBuilder.Entity("Second_Task_Entities.ExcelEntities.ExcelFile", b =>
                {
                    b.Navigation("ExcelClasses");
                });
#pragma warning restore 612, 618
        }
    }
}
